{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","rows","setRows","cols","setCols","color","setColor","showColorPicker","setShowColorPicker","bgColor","setBgColor","boxindex","className","style","backgroundColor","height","marginLeft","display","borderRadius","type","placeholder","id","onChange","e","target","value","t","content","console","log","i","j","push","onClick","k","m","pop","planogrambox","width","padding","margin","alignItems","rowcol","updatedColor","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18d56c01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport { ChromePicker } from 'react-color'\nimport createBox from './components/planogrambox'\n\nfunction App() {\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n\n  const [color, setColor] = useState(\"#ffffff\");\n  const [showColorPicker, setShowColorPicker] = useState(false);\n  \n  const [bgColor, setBgColor] = useState(\"#b3b3b3\");\n\n  let boxindex = [];\n  function planogrambox(i,j){\n    let k = i;\n    let m = j; \n    console.log(\"inside planogrambox\");\n    if(bgColor==\"#b3b3b3\"){\n      setBgColor(color);\n      boxindex.push((k+\",\"+m)); \n    }\n    else{\n      setBgColor(\"#b3b3b3\");\n      boxindex.pop((k+\",\"+m));\n    }\n    \n    console.log(boxindex);\n  }\n\n  function savePlanogram(){\n    let i;\n  }\n\n  let content = [];\n\n  const rowcol = () => {\n    let content = [];\n    console.log(\"Hello world\");\n    for (let i = 0 ; i<rows ; i++) {\n      for (let j=0;j<cols;j++){\n        \n        content.push(<div id={i+\"\"+j} onClick={()=>{planogrambox(i, j)}} style={{backgroundColor: bgColor, color: \"white\", height: \"100px\", width: \"5px\", padding:\"5px\", margin:\"10px\", display:\"inline\", alignItems:\"left\", borderRadius:\"6px\"}}>{i}, {j}</div>);\n\n      }\n      content.push(<div><br/></div>)\n    }\n    return content;\n  };\n\n\n\n  return (\n    <div className=\"App\" style={{backgroundColor: \"#dddddd\", height: \"100vh\"}}>\n      <div className=\"topApp\">\n        <form>\n          <div>\n          <br/>\n          <label style={{color:\"black\"}}>Planogram Boxes</label>\n          <label style={{color:\"black\", marginLeft:\"40%\"}}>Planogram UI</label><br/><br/>\n          <label style={{color:\"black\", marginLeft:\"50%\"}}>Enter Rows:</label>\n          <label style={{color:\"black\", marginLeft:\"15%\"}}>Enter Columns:<br/></label>\n          </div>\n          <div>\n          <input style={{color:\"black\", marginLeft:\"50%\", display:\"inline\", borderRadius:\"5px\"}} type=\"text\" placeholder={rows} id=\"rows\" onChange={(e)=>{setRows(e.target.value)}}/>\n          <input style={{color:\"black\", marginLeft:\"9%\", display:\"inline\", borderRadius:\"5px\"}} type=\"text\" placeholder={cols} id=\"cols\" onChange={(t)=>{setCols(t.target.value)}}/>\n          </div>\n          <br/>\n          <label style={{color:\"black\", marginLeft:\"50%\"}}>Name a category:</label>\n          <label style={{color:\"black\", marginLeft:\"12%\"}}>Box Color:</label>\n          <br/>\n          <input style={{color:\"black\", marginLeft:\"50%\", borderRadius:\"5px\", display:\"inline\"}} type=\"text\" id=\"category\" />\n        </form>\n        {rowcol()}\n        <button style={{color:\"black\", marginLeft:\"71%\", borderRadius:\"5px\", display:\"inline\", backgroundColor:color, height:\"30px\", width:\"100px\"}} onClick={()=>setShowColorPicker(showColorPicker => !showColorPicker)}>\n          { showColorPicker ? '' : ''}\n        </button>\n        {showColorPicker && (\n        <ChromePicker color={color} onChange={updatedColor => setColor(updatedColor.hex)} style={{marginLeft:\"71%\", borderRadius:\"5px\"}}/>\n        )}\n        <br/>\n        <button style={{backgroundColor:\"#0066ff\", height:\"35px\", width:\"100px\", marginLeft:\"50%\", color:\"white\"}}>Fix Selection</button>\n        <br/><br/>\n        <label style={{color:\"black\", marginLeft:\"50%\"}}>Enter Planogram Name:</label><br/>\n        <input style={{color:\"black\", marginLeft:\"50%\", borderRadius:\"5px\", display:\"inline\"}} type=\"text\" id=\"planoName\" /><br/><br/>\n        <button onClick={()=>{savePlanogram()}} style={{backgroundColor:\"#00bfff\", height:\"40px\", width:\"150px\", marginLeft:\"50%\", color:\"white\", borderRadius:\"5px\"}}>Save Planogram</button>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}